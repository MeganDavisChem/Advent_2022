import Data.List
import Data.Maybe
import System.IO

main = do
  handle <- openFile "input" ReadMode
  contents <- hGetContents handle
  putStrLn $ "Part one is: " ++ show (partOne contents)
  putStrLn $ "Part two is: " ++ show (partTwo contents)

partOne :: String -> Int
partOne input_string =
  let split_rucksacks = map splitMiddle $ lines input_string
      findValue (a, b) = getValue $ a `intersect` b
      valued_rucksacks = map findValue split_rucksacks
   in sum valued_rucksacks
  where
    -- Split a string into two parts
    splitMiddle :: String -> (String, String)
    splitMiddle rucksack =
      let midpoint = length rucksack `div` 2
       in splitAt midpoint rucksack

partTwo :: String -> Int
partTwo input_string =
  let badgeValues = map getValue . findBadges
      rucksacks = lines input_string
   in sum . badgeValues $ rucksacks
  where
    -- Ha! Recursive functions :) find overlaps of each set of three strings
    findBadges :: [String] -> [String]
    findBadges (x : y : z : xs)
      | null xs = [findGroupBadge]
      | otherwise = findGroupBadge : findBadges xs
      where
        findGroupBadge = nub (x `intersect` y `intersect` z)

-- Get the value of a character
getValue :: String -> Int
getValue item =
  let itemPriorities = ['a' .. 'z'] ++ ['A' .. 'Z']
   in fromMaybe 0 (head item `elemIndex` itemPriorities) + 1
